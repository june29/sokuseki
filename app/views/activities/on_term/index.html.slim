h2
  = "#{@owner_name} の #{@term_string} のアクティビティ"
p
  = "全 #{@activities.count} 件"
canvas#js-activities-chart
input#js-activities type="hidden" value="#{@activities.group(:activity_type).count.to_json}"
h3
  | Issue と Pull Request を Markdown で
h4
  | 全列挙
p
  - text1 = markdown_list(@activities.issue_and_pr.order(:acted_at))
  = text_area_tag(:markdown, text1, rows: 20, style: 'width: 100%;')
h4
  | リポジトリごと
p
  - text2 = markdown_list_group_by_repository(@activities.issue_and_pr.order(:acted_at))
  = text_area_tag(:markdown, text2, rows: 20, style: 'width: 100%;')
h3
  | タイムライン
h4
  | 全列挙
ul
  = render partial: "activities/github/event", collection: @activities.order(:acted_at), as: :activity
h4
  | リポジトリごと
- @activities.reject { |a| a.repo_name.nil? }.group_by { |a| a.repo_name }.each do |repo_name, repo_activities|
  h5
    = repo_name
  ul
    = render partial: "activities/github/event", collection: repo_activities.sort_by(&:acted_at), as: :activity

script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.min.js"
javascript:
  window.addEventListener('load', () => {
    const colorPalettes = [
      '#1abc9c',
      '#2ecc71',
      '#3498db',
      '#9b59b6',
      '#34495e',
      '#f1c40f',
      '#e67e22',
      '#e74c3c',
      '#ecf0f1',
      '#95a5a6'
    ]

    const activities = JSON.parse(document.getElementById('js-activities').value)
    let datasets = []
    let i = 0
    for (let key in activities) {
      datasets.push({
        label: key.replace('Event', ''),
        data: [activities[key]],
        backgroundColor: colorPalettes[i % colorPalettes.length]
      })
      i++
    }

    const ctx = document.getElementById('js-activities-chart').getContext('2d')
    new Chart(ctx, {
      type: 'bar',

      data: {
        labels: ['#{@term_string}のアクティビティ'],
        datasets: datasets
      },

      options: {
        title: {
          display: true,
          text: '種類ごと',
          fontSize: 20
        },
        scales: {
          xAxes: [{
            stacked: true,
            categoryPercentage: 0.4
          }],
          yAxes: [{
            stacked: true,
            ticks: {
              beginAtZero:true
            }
          }]
        }
      }
    })
  }, false)
